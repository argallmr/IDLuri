; docformat = 'rst'
;
; NAME:
;       MrWeb_Download__Define
;
;*****************************************************************************************
;   Copyright (c) 2014, Matthew Argall                                                   ;
;   All rights reserved.                                                                 ;
;                                                                                        ;
;   Redistribution and use in source and binary forms, with or without modification,     ;
;   are permitted provided that the following conditions are met:                        ;
;                                                                                        ;
;       * Redistributions of source code must retain the above copyright notice,         ;
;         this list of conditions and the following disclaimer.                          ;
;       * Redistributions in binary form must reproduce the above copyright notice,      ;
;         this list of conditions and the following disclaimer in the documentation      ;
;         and/or other materials provided with the distribution.                         ;
;       * Neither the name of the <ORGANIZATION> nor the names of its contributors may   ;
;         be used to endorse or promote products derived from this software without      ;
;         specific prior written permission.                                             ;
;                                                                                        ;
;   THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY  ;
;   EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES ;
;   OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT  ;
;   SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT,       ;
;   INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED ;
;   TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR   ;
;   BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN     ;
;   CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN   ;
;   ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH  ;
;   DAMAGE.                                                                              ;
;*****************************************************************************************
;
;+
;   Provide a GUI, similar to Dialog_Pickfile, for downloading files from the internet.
;
; :Author:
;   Matthew Argall::
;       University of New Hampshire
;       Morse Hall, Room 113
;       8 College Rd.
;       Durham, NH, 03824
;       matthew.argall@wildcats.unh.edu
;
; :History:
;	Modification History::
;       2013-10-21  -   Written by Matthew Argall.
;-
;*****************************************************************************************
;+
;   Event handler for the GUI. Forwards events to the proper event handling methods.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download_Events, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif
    
    ;Get the object
    Widget_Control, event.id, GET_UVALUE=eventStruct
    
    ;Forward events to the proper method.
    call_method, eventStruct.method, eventStruct.object, event
end


;+
;   Cleanup after the widget is destroyed.
;
; :Params:
;       TLB:            in, required, type=long
;                       Widget ID of the top level base being destroyed.
;-
pro MrWeb_Download_Cleanup, tlb
	;Nothing
end


;+
;   Event handler for the "Cancel" button.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::AddressBar_Update, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Pressed the RETURN key
    if event.type eq 0 && event.ch eq 10B then begin
        ;Read the entered text
        widget_control, event.id, GET_VALUE=address
        
        ;Try to change to that address
        self.webGet -> CD, address
        
        ;Update the list
        self -> Web_Update_Files
    end
end


;+
;   Event handler for the "Cancel" button.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Cancel, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Destroy the object
    obj_destroy, self
end


;+
;   Create a file-choosing GUI to download files from the web.
;-
pro MrWeb_Download::Create_GUI, $
GROUP_LEADER=group_leader
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

;---------------------------------------------------------------------
; Top Level Base /////////////////////////////////////////////////////
;---------------------------------------------------------------------
	;Make a top-level base with or without a groupleader. cdf_read_gui2 is called by other
	;blocking widgets, so if a group_leader is given, then make cdf_read_gui2 modal.
	if n_elements(group_leader) ne 0 then begin
	    no_block = 0
	    tlb = widget_base(GROUP_LEADER=group_leader, TITLE='MrWeb Download', COLUMN=1, $
                          XOFFSET=100, YOFFSET=0, UNAME='TLB', /BASE_ALIGN_CENTER, $
                          /MODAL)
	endif else begin
	    no_block = 1
	    tlb = widget_base(TITLE='MrWeb Download', COLUMN=1, XOFFSET=100, YOFFSET=0, $
                          UNAME='TLB', /BASE_ALIGN_CENTER, UVALUE=self)
	endelse
    
    self.tlb = tlb

;---------------------------------------------------------------------
; Address Bar ////////////////////////////////////////////////////////
;---------------------------------------------------------------------
    ;Get the web address
    web_dir = self.webGet -> GetURL()
    
    ;Create the address bar
    addrBase = widget_base(tlb, /ALIGN_LEFT, COLUMN=1)
    wLabel   = widget_label(addrBase, /ALIGN_LEFT, VALUE='Address')
    wText    = widget_text(addrBase, /ALIGN_LEFT, /EDITABLE, VALUE=web_dir, $
                           UVALUE={object: self, method: 'AddressBar_Update'}, $
                           UNAME='ADDRESS_BAR', EVENT_PRO='MrWeb_Download_Events', XSIZE=100)

;---------------------------------------------------------------------
; Directories Base ///////////////////////////////////////////////////
;---------------------------------------------------------------------
    dirBase = widget_base(tlb, COLUMN=3)

;---------------------------------------------------------------------
; Web Directory //////////////////////////////////////////////////////
;---------------------------------------------------------------------
    webBase = widget_base(dirBase, COLUMN=1)
    wLabel  = widget_label(webBase, /ALIGN_LEFT, VALUE='Web Select')
    wList   = widget_list(webBase, EVENT_PRO='MrWeb_Download_Events', $
                          UVALUE={object: self, method: 'Web_Select'}, $
                          UNAME='WEB_LIST', /MULTIPLE, XSIZE=50, YSIZE=20)

;---------------------------------------------------------------------
; Transfer Button ////////////////////////////////////////////////////
;---------------------------------------------------------------------
    selectBase = widget_base(dirBase, ROW=1, YSIZE=34*!d.y_ch_size, $
                             /BASE_ALIGN_CENTER)
    wButton    = widget_button(selectBase, VALUE='-->', UNAME='TRANSFER_RIGHT', $
                               UVALUE={object: self, method: 'Transfer'}, $
                               EVENT_PRO='MrWeb_Download_Events', YOFFSET=12*!d.y_ch_size)

;---------------------------------------------------------------------
; Local Directory ////////////////////////////////////////////////////
;---------------------------------------------------------------------
    webBase = widget_base(dirBase, COLUMN=1)
    wLabel  = widget_label(webBase, /ALIGN_LEFT, VALUE='Local Directory')
    wList   = widget_list(webBase, EVENT_PRO='MrWeb_Download_Events', $
                          UVALUE={object: self, method: 'Local_Select'}, $
                          UNAME='LOCAL_LIST', XSIZE=50, YSIZE=20)

;---------------------------------------------------------------------
; OK & Cancel ////////////////////////////////////////////////////////
;---------------------------------------------------------------------
    okBase  = widget_base(tlb, COLUMN=2)
    wButton = widget_button(okBase, /ALIGN_LEFT, VALUE='Ok', UNAME='OK', $
                            EVENT_PRO='MrWeb_Download_Events', $
                            UVALUE={object: self, method: 'Ok'})
    wButton = widget_button(okBase, /ALIGN_RIGHT, VALUE='Cancel', UNAME='CANCEL', $
                            EVENT_PRO='MrWeb_Download_Events', $
                            UVALUE={object: self, method: 'Cancel'})

;---------------------------------------------------------------------
;Create the State Variable, Realize, and Start Event Handling ////////
;---------------------------------------------------------------------

	;Realize the top-level base
	widget_control, tlb, /REALIZE
	
	;Call XMANAGER
	xmanager, 'MrWeb_Download', tlb, cleanup='MrWeb_Download_Cleanup', $
	          NO_BLOCK=no_block
	          
	;Fill both lists
	self -> Local_Update_Files
	self -> Web_Update_Files
end


;+
;   Event handling method.
;
; :Params:
;       EVENT:      in, required, type=structure
;                   Event returned by 
;-
pro MrWeb_Download::Events, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif
    
    ;Do nothing yet
end


;+
;   Get object properties.
;
; :Keywords:
;       ALL:            in, optional, type=boolean
;                       If set, all links will be displayed. By default, only links
;                           starting with a number or a letter will be displayed.
;       DELAY:          out, optional, type=float
;                       Number of seconds to wait for a double click. If a second click
;                           is not detected before DELAY seconds, a single click event
;                           will be generated.
;-
pro MrWeb_Download::GetProperty, $
ALL=all, $
DELAY=delay
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Set properties
    if arg_present(all)   gt 0 then all   = self.all
    if arg_present(delay) gt 0 then delay = self.delay
end


;+
;   Event handler for the "Local Directory" list. Change directories on the local machine.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Local_Select, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        self.nClicks = 0
        void = cgErrorMsg()
        return
    endif

    ;What type of event was generated?
    event_type = tag_names(event, /STRUCTURE_NAME)

    ;Double clicks
    ;   - If a second WIDGET_LIST event is generated before the timer goes off,
    ;       consider it a double click.
    ;   - Make sure the same list item was clicked twice. If not, count it as a
    ;       single click.
    ;   - Reset the number of clicks.
    if (event_type eq 'WIDGET_LIST') and (self.nClicks eq 1) then begin
        ;Which item was selected?
        selection = (*self.local_list)[event.index]

        ;Current directory
        self.webGet -> GetProperty, DIRECTORY=current_local

        ;Check if '..' was selected
        if selection eq '..' then begin
            ;Get the directory just above the current directory.
            cd, current_local
            cd, '..'
            cd, CURRENT=new_local
            cd, self.local_pwd
            
            ;Change directories
            if new_local ne current_local then begin
                self.webGet -> SetProperty, DIRECTORY=new_local
                self -> Local_Update_Files
            endif
            
        ;Not '..'
        endif else begin
            ;Check if a directory was selected.
            ;   - If so, change to that directory.
            test_dir  = filepath(selection, ROOT_DIR=current_local)
            if file_test(test_dir, /DIRECTORY) then begin
                self.webGet -> SetProperty, DIRECTORY=test_dir
                self -> Local_Update_Files
            endif
        endelse
        
        ;Reset the number of clicks.
        self.nClicks = 0
        return
    endif
    
    ;Single clicks
    ;   - Select the clicked list item
    if (event_type eq 'WIDGET_LIST') and (self.nClicks eq 0) then begin
        widget_control, event.id, TIMER=self.delay
        self.nClicks = 1
    endif
    
    ;Did the timer go off?
    ;   - If nClicks is still 1, then it was a single click.
    if (event_type eq 'WIDGET_TIMER') and  (self.nClicks eq 1) $
        then self.nClicks = 0
end


;+
;   Event handler for the "Local Directory" list. Change directories on the local machine.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Local_Update_Files
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        if n_elements(local_dir) gt 0 then cd, self.local_pwd
        void = cgErrorMsg()
        return
    endif

    ;Get the local directory
    self.webGet -> GetProperty, DIRECTORY=local_dir
    
    ;Change to the local directory, get its contents, then change back
    cd, local_dir
    content = file_search('*')
    cd, self.local_pwd

    ;Mark directories with trailing path separator.
    iDir = where(file_test(filepath(content, ROOT_DIR=local_dir), /DIRECTORY), nDir)
    if nDir gt 0 then content[iDir] += path_sep()
    
    ;Add the up-one-directory symbol
    content = ['..', content]
    
    ;Find the list and update it
    ;   - Include ".." for "Up One Directory".
    listID = widget_info(self.tlb, FIND_BY_UNAME='LOCAL_LIST')
    widget_control, listID, SET_VALUE=content

    ;Store the list items
    *self.local_list = content
end


;+
;   Event handler for the "Ok" button.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Ok, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Destroy the object
    obj_destroy, self
end


;+
;   Set object properties.
;
; :Keywords:
;       ALL:            in, optional, type=boolean
;                       If set, all links will be displayed. By default, only links
;                           starting with a number or a letter will be displayed.
;       DELAY:          in, optional, type=float
;                       Number of seconds to wait for a double click. If a second click
;                           is not detected before DELAY seconds, a single click event
;                           will be generated.
;-
pro MrWeb_Download::SetProperty, $
ALL=all, $
DELAY=delay
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Set properties
    if n_elements(all)   gt 0 then self.all   = keyword_set(all)
    if n_elements(delay) gt 0 then self.delay = delay
end


;+
;   Event handler for the "-->" button. Transer files from the web to the local machine.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Transfer, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Indices of the selected items
    listID  = widget_info(event.top, FIND_BY_UNAME='WEB_LIST')
    iSelect = widget_info(listID, /LIST_SELECT)
    
    ;If no items are selected, return
    nSelect = n_elements(iSelect)
    if nSelect eq 1 && iSelect eq -1 then return
    
    ;Get the selection
    selection = (*self.web_list)[iSelect]

    ;Download the selected items
    for i = 0, nSelect - 1 do begin
        ;Download the file
        self.webGet -> Download, selection[i], /QUIET
        
        ;Update the local directory
        self -> Local_Update_Files
    endfor
end


;+
;   Event handler for the "Web Select" list.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Web_Select, event
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;What type of event was generated?
    event_type = tag_names(event, /STRUCTURE_NAME)

    ;Double clicks
    ;   - Check if a link was clicked (not a downloadable file)
    if (event_type eq 'WIDGET_LIST') and (self.nClicks eq 1) then begin
        ;Current URL
        current_url = self.webGet -> GetURL()
    
        ;Which item was selected?
        selection = (*self.web_list)[event.index]

        ;Check if '..' was selected
        if selection eq '..' then begin
            ;Get the directory just above the current directory.
            self.webGet -> CD, '..'
            new_url = self.webGet -> GetURL()
            
        ;Not '..'
        endif else begin
            ;Test if it was a link
            new_url = self.webGet -> AppendURL(selection)
            type    = self.webGet -> GetHttpContentType(fullPath)

            ;If an html link, then switch.
            if type eq 'html' $
                then self.webGet -> CD, new_url $
                else new_url = current_url
        endelse
        
        ;If the URL changed
        if new_url ne current_url then begin
            ;Update the list items
            self -> Web_Update_Files
            
            ;Update the web address
            addrID = widget_info(event.top, FIND_BY_UNAME='ADDRESS_BAR')
            widget_control, addrID, SET_VALUE=new_url
        endif
        
        ;Reset the number of clicks.
        self.nClicks = 0
        return
    endif
    
    ;Single clicks
    ;   - Select the clicked list item
    if (event_type eq 'WIDGET_LIST') and (self.nClicks eq 0) then begin
        widget_control, event.id, TIMER=self.delay
        self.nClicks = 1
    endif
    
    ;Did the timer go off?
    ;   - If nClicks is still 1, then it was a single click.
    if (event_type eq 'WIDGET_TIMER') and (self.nClicks eq 1) $
        then self.nClicks = 0
end


;+
;   Event handler for the "Local Directory" list. Change directories on the local machine.
;
; :Params:
;       EVENT:          in, required, type=boolean
;                       Event structure generated by XManager.
;-
pro MrWeb_Download::Web_Update_Files
    compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Find the content of the current directory
    if self.all $
        then self.webGet -> LS, OUTPUT=content $
        else self.webGet -> LS, '^[A-Za-z0-9_@]', OUTPUT=content, /REGEX

    ;Remove empty strings
    ;   - Add the up-one-directory link
    iLinks = where(content ne '', nLinks)
    if nLinks gt 0 $
        then content = ['..', content[iLinks]] $
        else content = '..'

    ;Find the list and update it
    ;   - Include ".." for "Up One Directory".
    listID = widget_info(self.tlb, FIND_BY_UNAME='WEB_LIST')
    widget_control, listID, SET_VALUE=content
    
    ;Store the list items
    *self.web_list = content
end


;+
;   Cleanup after the object is destroyed. This will destroy the widget, if it exists.
;-
pro MrWeb_Download::Cleanup
	compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /CANCEL
        void = cgErrorMsg()
        return
    endif

    ;Free pointers
    ptr_free, self.local_list
    ptr_free, self.web_list

    ;Destroy the widget
    if widget_info(self.tlb, /VALID) then widget_control, self.tlb, /DESTROY

    ;Destroy the web-interface object
    obj_destroy, self.webGet
end


;+
;   The initialization method.
;
; :Params:
;       URL:            in, optional, type=string, default='http://www.google.com'
;                       Web address from which to download data.
;
; :Keywords:
;       ALL:            in, optional, type=boolean, default=0
;                       If set, all links will be displayed. By default, only links
;                           starting with a number or a letter will be displayed.
;       DELAY:          in, optional, type=float, default=0.2
;                       Number of seconds to wait for a double click. If a second click
;                           is not detected before DELAY seconds, a single click event
;                           will be generated.
;       DIRECTORY:      in, optional, type=string
;                       Directory in which to save downloaded files.
;       GROUP_LEADER:   in, optional, type=long
;                       Widget ID of the widget that will serve as the group leader.
;
; :Returns:
;       If successful, a valid MrWeb_Download object will be returned.
;-
function MrWeb_Download::init, url, $
ALL=all, $
DELAY=delay, $
DIRECTORY=directory, $
GROUP_LEADER=group_leader
	compile_opt strictarr
    
    ;Catch errors
    catch, the_error
    if the_error ne 0 then begin
        catch, /cancel
        void = cgErrorMsg()
        return, 0
    endif
    
    ;Defaults.
    all = keyword_set(all)
    if n_elements(delay) eq 0 then delay = 0.2
    if n_elements(url)   eq 0 then url = 'http://google.com'
    
    ;Create the MrWebGet object
    self.webGet = obj_new('MrWebGet', url, DIRECTORY=directory)
    if obj_valid(self.webGet) eq 0 then return, 0

    ;Allocate heap
    self.local_list = ptr_new(/ALLOCATE_HEAP)
    self.web_list   = ptr_new(/ALLOCATE_HEAP)
    
    ;Set object properties
    self -> SetProperty, ALL=all, DELAY=delay
    
    ;Create the GUI
    self -> Create_GUI, GROUP_LEADER=group_leader

    return, 1
end


;+
;   The class definition statement.
;
; :Params:
;       CLASS:              out, optional, type=structure
;                           Class definition structure.
;
; :Fields:
;       ALL:            Display all links?
;       DELAY:          Max time to wait for a double click.
;       LOCAL_LIST:     List of files in the local directory to which files are saved.
;       LOCAL_PWD:      Present working directory upon initialization.
;       NCLICKS:        Number of clicks: single or double.
;       TLB:            Widget ID of the top-level base.
;       WEB_LIST:       List of links at the current web path.
;       WEBGET:         Object for navigating and downloading from the web.
;-
pro MrWeb_Download__Define, class
    compile_opt strictarr

    class = { MrWeb_Download, $
              inherits IDL_Object, $
              all:          0B, $
              delay:        0.0, $
              local_pwd:    '', $
              local_list:   ptr_new(), $
              nClicks:      0B, $
              tlb:          0L, $
              web_list:     ptr_new(), $
              webGet:       obj_new() $
            }
end